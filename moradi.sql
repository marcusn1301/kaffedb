-- MySQL Script generated by Kelvin Gia Huy Ma, 
-- Marcus Stephan Nordal and Sindri Mørch Tomasson.
-- Mon Mar 14 23:43:10 2022


import sqlite3
con = sqlite3.connect("test.db")
--Vi kan deretter hente ut et markørobjekt fra tilkoblingsobjektet ved hjelp
--av cursor()-metoden. Markørobjektet kan så brukes til å utføre spørringer
--mot databasen og hente ut resultater:
cursor = con.cursor()
cursor.execute("SELECT * FROM sqlite_master")
--Når du er fornøyd med det du har utrettet i databasen, er det en god idé å
--lukke tilkoblingen:
con.close()



--# Ikke gjør dette hjemme!
cursor.execute("SELECT * FROM person WHERE navn = '%s'" % navn)
--# Gjør heller:
cursor.execute("SELECT * FROM person WHERE navn = ?", (navn))
--# Eller, om du vil være veldig ryddig:
cursor.execute("SELECT * FROM person WHERE navn =:navn", {"navn" = navn})

--1. fetchone(): hent ut neste resultat i resultatsettet, hvis det finnes. 
--Returnerer en tuppel eller None dersom det ikke er flere tupler igjen.

cursor.execute("SELECT * FROM person")
row = cursor.fetchone()
print("First row from table person:")
print(row)

--2. fetchall(): hent ut hele resultatsettet (eventuelt de gjenværende elementene 
--i settet dersom fetchone() er blitt kalt). 
--Returnerer en liste
--av tupler eller en tom liste dersom ingen tupler i databasen matcher spørringen.

cursor.execute("SELECT * FROM person")
rows = cursor.fetchall()
print("All rows in the table person:")
print(rows)

--3. fetchmany(i): hent ut en liste av i tupler fra resultatsettet. Om det
--er færre rader tilgjengelig, returnerer den bare disse, eventuelt en tom
--liste hvis det ikke er rader igjen.

cursor.execute("SELECT * FROM person")
rows = cursor.fetchmany(2)
print("First two rows from table person:")
print(rows)

--4. Bruk markørobjektet som en iterator, eksempelvis i en for-løkke.
for row in cursor.execute("SELECT * FROM person"):
print(row)


--Å lage tabeller og sette inn data gjøres på liknende vis, igjen ved hjelp av
--execute():

cursor.execute('''CREATE TABLE person
(id INTEGER PRIMARY KEY, name TEXT, birthday TEXT)''')
cursor.execute('''INSERT INTO person VALUES (1, 'Ola Nordmann', '2002-02-02')''')
connection.commit()
connection.close()
Legg merke til at vi også kaller commit()-metoden til tilkoblingsobjektet
for å fullføre transaksjonen.
Lurer du på noe? Python-dokumentasjonen inkluderer en god side om
sqlite3-modulen. Især kan kapittelet «Using sqlite3 efficiently» være av interesse. Ellers kan du som alltid spørre på Piazza. 
Om du lurer på noe, er sjansen stor for at noen andre også gjør det.


-- -----------------------------------------------------
-- Schema KaffeDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `KaffeDB` ;
CREATE SCHEMA IF NOT EXISTS `KaffeDB` DEFAULT CHARACTER SET utf8 ;
USE `KaffeDB` ;


-- -----------------------------------------------------
-- Table `KaffeDB`.`Bruker`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Bruker` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Bruker` (
  `BrukerID` INT NOT NULL AUTO_INCREMENT,
  `Epost` VARCHAR(50) NOT NULL,
  `Passord` VARCHAR(50) NOT NULL,
  `Fornavn` VARCHAR(30),
  `Etternavn` VARCHAR(30),
  CONSTRAINT Bruker_PK PRIMARY KEY (`BrukerID`)
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`FerdigbrentKaffe`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`FerdigbrentKaffe` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`FerdigbrentKaffe` (
  `FerdigbrentKaffeID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(50) NOT NULL,
  `Dato` DATE NOT NULL,
  `Brenningsgrad` VARCHAR(30) NOT NULL,
  `Beskrivelse` VARCHAR(100),
  `KiloprisNOK` FLOAT NOT NULL,
  `PartiID` INT NOT NULL,
  `KaffebrenneriID`INT NOT NULL,
  CONSTRAINT FerdigbrentKaffe_PK PRIMARY KEY (`FerdigbrentKaffeID`),
  CONSTRAINT FerdigbrentKaffe_FK FOREIGN KEY (`PartiID`) REFERENCES Kaffeparti(`PartiID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  CONSTRAINT FerdigbrentKaffe_FK FOREIGN KEY (`KaffebrenneriID`) REFERENCES Kaffebrenneri(`KaffebrenneriID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Kaffesmaking`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Kaffesmaking` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Kaffesmaking` (
  `KaffesmakingID` INT NOT NULL,
  `Smaksnotater` VARCHAR(100),
  `Poeng` INT UNSIGNED CONSTRAINT CHECK (`Poeng` < 11) NOT NULL,
  `Smaksdato` DATE NOT NULL,
  `BrukerID` INT NOT NULL,
  `FerdigbrentKaffeID` INT NOT NULL,
  CONSTRAINT Kaffesmaking_PK PRIMARY KEY (`KaffesmakingID`),
  CONSTRAINT Kaffesmaking_FK FOREIGN KEY (`BrukerID`) REFERENCES Bruker(`BrukerID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  CONSTRAINT Kaffesmaking_FK FOREIGN KEY (`FerdigbrentKaffeID`) REFERENCES FerdigbrentKaffe(`FerdigbrentKaffeID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Kaffebrenneri`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Kaffebrenneri` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Kaffebrenneri` (
  `KaffebrenneriID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(50) NOT NULL,
  CONSTRAINT Kaffebrenneri_PK PRIMARY KEY (`KaffebrenneriID`)
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Foredlingsmetode`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Foredlingsmetode` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Foredlingsmetode` (
  `ForedlingsmetodeID` INT NOT NULL,
  `Navn` VARCHAR(30) NOT NULL,
  `Beskrivelse` VARCHAR(100),
  `PartiID` INT NOT NULL, 
  CONSTRAINT Foredlingsmetode_PK PRIMARY KEY (`ForedlingsmetodeID`),
  CONSTRAINT Foredlingsmetode_FK FOREIGN KEY (`PartiID`) REFERENCES Kaffeparti(`PartiID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Kaffeparti`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Kaffeparti` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Kaffeparti` (
  `PartiID` INT NOT NULL AUTO_INCREMENT,
  `Innhøstingsår` INT NOT NULL,
  `KiloprisUSD` FLOAT NOT NULL,
  `ForedlingsmetodeID` INT NOT NULL,
  `KaffegårdID` INT NOT NULL,
  CONSTRAINT Kaffeparti_PK PRIMARY KEY (`PartiID`),
  CONSTRAINT Kaffeparti_FK FOREIGN KEY (`ForedlingsmetodeID`) REFERENCES Foredlingsmetode(`ForedlingsmetodeID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  CONSTRAINT Kaffeparti_FK FOREIGN KEY (`KaffegårdID`) REFERENCES Kaffegård(`KaffegårdID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`BestårAv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`BestårAv` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`BestårAv` (
  `PartiID` INT NOT NULL,
  `KaffebønneID` INT NOT NULL,
  CONSTRAINT BestårAv_FK FOREIGN KEY (`PartiID`) REFERENCES Kaffeparti(`PartiID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  CONSTRAINT BestårAv_FK FOREIGN KEY (`KaffebønneID`) REFERENCES Kaffebønne(`KaffebønneID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Kaffebønner`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Kaffebønner` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Kaffebønner` (
  `KaffebønneID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(30) NOT NULL,
  `Art` VARCHAR(30) NOT NULL,
  CONSTRAINT Kaffebønner_PK PRIMARY KEY (`KaffebønneID`)
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`DyrketAv`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`DyrketAv` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`DyrketAv` (
  `KaffebønneID` INT NOT NULL,
  `KaffegårdID` INT NOT NULL,
  CONSTRAINT DyrketAv_FK FOREIGN KEY (`KaffebønneID`) REFERENCES Kaffebønne(`KaffebønneID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE,
  CONSTRAINT DyrketAv_FK FOREIGN KEY (`KaffegårdID`) REFERENCES Kaffegård(`KaffegårdID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Kaffegård`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Kaffegård` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Kaffegård` (
  `KaffegårdID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(50) NOT NULL,
  `RegionID` INT NOT NULL,  
  CONSTRAINT Kaffegård_PK PRIMARY KEY (`KaffegårdID`),
  CONSTRAINT Kaffegård_FK FOREIGN KEY (`RegionID`) REFERENCES Region(`RegionID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE 
);


-- -----------------------------------------------------
-- Table `KaffeDB`.`Region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Region` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Region` (
  `RegionID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(30) NOT NULL,
  `Moh` FLOAT NOT NULL,
  `LandID` INT NOT NULL,
  CONSTRAINT Region_PK PRIMARY KEY (`RegionID`),
  CONSTRAINT Region_FK FOREIGN KEY (`LandID`) REFERENCES Land(`LandID`)
    ON UPDATE CASCADE
    ON DELETE CASCADE 
);
  

-- -----------------------------------------------------
-- Table `KaffeDB`.`Land`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `KaffeDB`.`Land` ;

CREATE TABLE IF NOT EXISTS `KaffeDB`.`Land` (
  `LandID` INT NOT NULL AUTO_INCREMENT,
  `Navn` VARCHAR(30) NOT NULL,
  CONSTRAINT Land_PK PRIMARY KEY (`LandID`)
);
